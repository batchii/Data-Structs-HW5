For Task 1, we used an adjacency list data structure to tackle the problem. The first input integer, the number of people, determines the size of the adjacency list (the number of indices in the array) arrayLL and the size of the integer list (the number of indices in the array) arrayInt. Afterwards, for each relationship, we used the addEdge method to map that one person knows another. The source, the first number in the set, has a directed edge towards the destination, the second number in the set. Each time the addEdge method is called, we increment the integer array arrayInt at the destination to signify that another person knows the second number in the set. If the source and destination is the same, that is, the person knows him/herself, the relationship is not mapped. We must add every relationship possible to determine the celebrity. When all the input has been parsed, we can find the celebrity. Everyone must know the celebrity the celebrity must know no one. Therefore, the celebrity will not have any directed edges to anyone, and everyone will have a directed edge to the celebrity. The hasEdge method determines the former, and the numEdges method determines the latter. Calling hasEdge checks that the celebrity doesn’t know anyone by seeing if the vertex has any directed edges to another vertex. Calling numEdges evaluates how many directed edges point towards the input; we check to see if numEdges is equal to one less than the number of people listed at the gathering. We check every person and see if If hasEdge is false and numEdges = size – 1; if both cases are present we have determined our celebrity. If no person meets both requirements, an error message occurs. The efficiency of our data structure for each method is as follows:
	addEdge: O(1)
		Adds from the back through a tail node; reassigns tail node when new node is added.
	hasEdge: O(1)
		Simply returns true or false depending on whether the sentinel node has a node after it.
	numEdges: O(1)
		Simply returns the number in the arrayInt at a given index.
For determining the celebrity in the driver program, the worst case scenario is O(N) with N being the number of people. After mapping all the relationships, we run a for loop that potentially runs N times, depending on the celebrity’s integer value. 
